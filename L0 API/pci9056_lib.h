#ifndef _PCI9056_LIB_H_
#define _PCI9056_LIB_H_

/************************************************************************
*  File: pci9056_lib.h
*
*  Library for accessing PCI9056 devices.
*  The code accesses hardware using WinDriver's WDC library.
*  Code was generated by DriverWizard v10.20.
*
*  Jungo Confidential. Copyright (c) 2017 Jungo Ltd.  http://www.jungo.com
*************************************************************************/

#include "wdc_lib.h"
#include "samples/shared/pci_regs.h"
#include "samples/shared/bits.h"

#ifdef __cplusplus
extern "C" {
#endif

/*************************************************************
  General definitions
 *************************************************************/
/* Default vendor and device IDs */
#define PCI9056_DEFAULT_VENDOR_ID 0x8620 /* Vendor ID */
#define PCI9056_DEFAULT_DEVICE_ID 0x2 /* Device ID */


/* Address space information struct */
#define MAX_TYPE 8
typedef struct {
    DWORD dwAddrSpace;
    CHAR sType[MAX_TYPE];
    CHAR sName[MAX_NAME];
    CHAR sDesc[MAX_DESC];
} PCI9056_ADDR_SPACE_INFO;

/* Interrupt result information struct */
typedef struct
{
    DWORD dwCounter; /* Number of interrupts received */
    DWORD dwLost;    /* Number of interrupts not yet handled */
    WD_INTERRUPT_WAIT_RESULT waitResult; /* See WD_INTERRUPT_WAIT_RESULT values in windrvr.h */
    DWORD dwEnabledIntType; /* Interrupt type that was actually enabled
                               (MSI/MSI-X/Level Sensitive/Edge-Triggered) */
    DWORD dwLastMessage; /* Message data of the last received MSI/MSI-X
                        (Windows Vista/7); N/A to line-based interrupts) */
} PCI9056_INT_RESULT;
/* TODO: You can add fields to PCI9056_INT_RESULT to store any additional
         information that you wish to pass to your diagnostics interrupt
         handler routine (DiagIntHandler() in pci9056_diag.c) */

/* PCI9056 diagnostics interrupt handler function type */
typedef void (*PCI9056_INT_HANDLER)(WDC_DEVICE_HANDLE hDev,
    PCI9056_INT_RESULT *pIntResult);

/* PCI9056 diagnostics plug-and-play and power management events handler function type */
typedef void (*PCI9056_EVENT_HANDLER)(WDC_DEVICE_HANDLE hDev,
    DWORD dwAction);

/*************************************************************
  Function prototypes
 *************************************************************/
DWORD PCI9056_LibInit(void);
DWORD PCI9056_LibUninit(void);

WDC_DEVICE_HANDLE PCI9056_DeviceOpen(const WD_PCI_CARD_INFO *pDeviceInfo);
BOOL PCI9056_DeviceClose(WDC_DEVICE_HANDLE hDev);

static BOOL IsItemExists(PWDC_DEVICE pDev, ITEM_TYPE item);
DWORD PCI9056_IntEnable(WDC_DEVICE_HANDLE hDev, PCI9056_INT_HANDLER funcIntHandler);
DWORD PCI9056_IntDisable(WDC_DEVICE_HANDLE hDev);
BOOL PCI9056_IntIsEnabled(WDC_DEVICE_HANDLE hDev);

DWORD PCI9056_EventRegister(WDC_DEVICE_HANDLE hDev, PCI9056_EVENT_HANDLER funcEventHandler);
DWORD PCI9056_EventUnregister(WDC_DEVICE_HANDLE hDev);
BOOL PCI9056_EventIsRegistered(WDC_DEVICE_HANDLE hDev);

DWORD PCI9056_GetNumAddrSpaces(WDC_DEVICE_HANDLE hDev);
BOOL PCI9056_GetAddrSpaceInfo(WDC_DEVICE_HANDLE hDev, PCI9056_ADDR_SPACE_INFO *pAddrSpaceInfo);


const char *PCI9056_GetLastErr(void);

#ifdef __cplusplus
}
#endif

#endif
